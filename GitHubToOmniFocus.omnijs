/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Félix Chénier",
	"identifier": "com.felixchenier.of.githubtoomnifocus",
	"version": "1.0",
	"description": "Update GitHub issues to OmniFocus",
	"label": "GitHub to OmniFocus",
	"shortLabel": "GitHub to OmniFocus",
	"paletteLabel": "GitHub to OmniFocus",
	"image": "gearshape"
}*/
(() => {
	const action = new PlugIn.Action(function(selection, sender){
		// action code
		// selection options: columns, document, editor, items, nodes, outline, styles

        // Add code to run when the action is invoked

		ofProjectName = 'Name of the project to create in OmniFocus'
		ghRepositoryOwner = 'Owner of the project on GitHub'
		ghRepositoryName = 'Name of the project on GitHub'
		ghUserName = 'Your user name on GitHub'

		// *****************************************************
		// Mark all issues complete
		// *****************************************************

		ofProject = flattenedProjects.byName(ofProjectName)
		if (ofProject != null) {
			ofProject.tasks.forEach(
				function complete(task){
					if (task.name.startsWith("GitHub : Issue #")) {
						task.markComplete()
					}
			})
		}

		// *****************************************************
		// Fetch my issues from GitHub
		// Each fetch launch another fetch until we reach
		// function processCard
		// *****************************************************
		var the_url = URL.fromString(
			"https://api.github.com/repos/" +
			ghRepositoryOwner + "/" +
			ghRepositoryName + "/issues?assignee=" +
			ghUserName)

		the_url.fetch(function(res){
			var myCards = JSON.parse(res.toString())
			myCards.forEach(processCard)
		})

		function processCard(card){

			var taskName = "GitHub : Issue #" + card.number + " - " + card.title

			if (ofProject == null) {
				ofProject = new Project(ofProjectName)
				ofProject.note = "GitHub repository: " + card.repository_url + "\n" +
					"--------------------------------"
			} else {
				ofProject.markIncomplete()
			}

			// Find the corresponding task in OmniFocus, create it if it doesn't exist
			function taskHasID(task){
				return task.note.startsWith("GitHub Issue #" + card.number)
			}
			var task = ofProject.tasks.find(taskHasID)
			if (task == null) {
				task = new Task(taskName, ofProject)
				task.note = "GitHub Issue #" + card.number + "\n" +
					"Issue : https://github.com/" +
					ghRepositoryOwner + "/" +
					ghRepositoryName + "/issues/" + card.number + "\n" +
					"Repository : https://github.com/" +
					ghRepositoryOwner + "/" +
					ghRepositoryName + "/issues\n" +
					"--------------------------------"
			} else {
				task.name = taskName
				task.markIncomplete()
				ofProject.markIncomplete()
			}
			// In every case:
			if (card.due_on == null) {
				task.dueDate = null
			} else {
				task.dueDate = new Date(card.due_on)
			}
		}

	});

	action.validate = function(selection, sender){
		// validation code
		// selection options: columns, document, editor, items, nodes, outline, styles
		return true
	};
	
	return action;
})();

	
